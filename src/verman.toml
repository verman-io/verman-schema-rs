name = "verman-schema-rs"
version = "0.0.1"
license = "(Apache-2.0 OR MIT)"
homepage = "https://verman.io"
repo = "https://github.com/verman-io"
authors = [""]

[[stack.database]]
kind = "sql"

[[stack.application_server]]
kind = "python"
versions = ["~2.7", "~3.6", "~3.13"]
server_priority = ["Waitress", "mod_wsgi", "uvicorn"]

[[stack.application_server]]
kind = "ruby"

[stack_state.database]
kind = "sql"
install = "always"
start = "always"

[stack_state.application_server]
install = "always"
start = "always"

[stack_state.routing]
install = "always"
start = "always"

[[stack_routing]]
name = "my_name.verman.io"
protocol = "https"
certificate_vendor = "LetsEncrypt"

[[component]]
src_uri = "file://python_api_folder/"
dst_uri = "http://localhost:${env.PYTHON_API_PORT}"

[[component.constraints]]
kind = "lang"
required_variant = "python"

[[component.constraints]]
kind = "OS"

[[component]]
src_uri = "file://ruby_api_folder/"

[component.dst_uri]
if = "OS == \"windows\""
then = '"\\.\pipe\PipeName"'
else = "\"unix:///var/run/my-socket.sock\""

[[component.constraints]]
kind = "lang"
required_variant = "ruby"
required_version = ">3.1.2, <3.2"

[[component.constraints]]
kind = "OS"
required_variant = "${\"linux\" || \"windows\"}"

[[component]]
dst_uri = "my_app.verman.io"

[[component.constraints]]
kind = "routing"

[component.env_vars]
COMPONENT_NAME = "mount_component"

[[component.mounts]]
when = "OS == \"windows\""
uri = "file://win_nginx.conf"
action = "nginx::make_site_available"

[component.mounts.action_args]
upsert = true

[[component.mounts]]
when = "NOT EXISTS(ISPREFIXOF(\"nginx::\", ${.mounts[].action}))"
uri = "/api/py"
src_uri = """
#!/jq
.component[] | select(.constraints[] | .kind == \"lang\" and .required_variant == \"python\").dst_uri"""
action = "mount::expose"

[[component.mounts]]
when = "NOT EXISTS(ISPREFIXOF(\"nginx::\", ${.mounts[].action}))"
uri = "/api/ruby"
src_uri = """
#!/jq
'.component[] | select(.constraints[] | .kind == \"lang\" and .required_variant == \"ruby\").dst_uri"""
action = "mount::expose"

[[component.mounts]]
when = "BUILD_TIME > 2024"
uri = "/api/demo"
action = "mount::expose"

[env_vars]
DEBUG_ROOT = "true"
